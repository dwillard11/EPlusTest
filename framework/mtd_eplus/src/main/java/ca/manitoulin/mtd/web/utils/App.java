package ca.manitoulin.mtd.web.utils;

import com.lowagie.text.Chunk;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.Phrase;

import java.awt.*;
import java.io.IOException;
import java.util.*;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

	
	public static final Map<String, Field> FIELDS = new LinkedHashMap<>();
	static {
		
		
		FIELDS.put("readyTime", new Field("Ready Date/Time", new Phrase("2017-12-03 10:00", QuoteGenerator.CELL_FONT)));
		FIELDS.put("pickupCity", new Field("Pickup City", new Phrase("Romulus MI", QuoteGenerator.CELL_FONT)));
		FIELDS.put("destination", new Field("Destination/Delivery", new Phrase("VIE Airport", QuoteGenerator.CELL_FONT)));
		FIELDS.put("cost", new Field("Cost", new Phrase("$5950.00", QuoteGenerator.CELL_FONT)));
		// FIELDS.put("cargo", new Field("Cargo Details", new Phrase("1 /5 LBS 6x6x10‚Äù Car parts", QuoteGenerator.CELL_FONT)));



		List<Chunk> termList = Arrays.asList(
				new Chunk("DTA\n\n", QuoteGenerator.CELL_FONT),
				new Chunk("Baggage charge at cost + 10%\n\n", QuoteGenerator.CELL_FONT),
				new Chunk("SELF DECLARATION: If courier required to pay taxes on arrival a service fee will apply + all outlay charges\n\n",
						QuoteGenerator.CELL_FONT),
				new Chunk("Iata Baggage Restrictions: Shipper/Consignee providing necessary customs documents\n\n",
						QuoteGenerator.CELL_FONT),
				new Chunk("Airline Penalties if ticket cancelled after issued\n\n", QuoteGenerator.CELL_FONT),
				new Chunk("Certain items are considered hazardous and, by federal law, are prohibited from all Airlines\n\n",
						new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.RED)),

				new Chunk("The above information is based on current ticket and price availability at time of booking. Tickets will be issued at time of booking and are not changeable or refundable, cancellation charges will apply Iata Baggage Restrictions, Shipper/Consignee providing necessary customs documents", QuoteGenerator.CELL_FONT ),
			    new Chunk( "Airline Penalties if ticket cancelled after issued\n\nExcess Baggage  Charge = Baggage Cost Plus 10%", QuoteGenerator.CELL_FONT ),
				new Chunk( "****  Expedite Plus will require the following information to arrange customs clearance in LAX HTS Code, Description of goods and the value of product****",  QuoteGenerator.CELL_FONT),


				new Chunk("The above information is based on current ticket and price availability at time of booking. Tickets will be issued at time of booking and are not changeable or refundable, cancellation charges will apply Iata Baggage Restrictions, Shipper/Consignee providing necessary customs documents", new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE) ),
			    new Chunk( "Airline Penalties if ticket cancelled after issued\n\nExcess Baggage  Charge = Baggage Cost Plus 10%",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE)  ),
				new Chunk( "****  Expedite Plus will require the following information to arrange customs clearance in LAX HTS Code, Description of goods and the value of product****",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE) ),

				new Chunk("The above information is based on current ticket and price availability at time of booking. Tickets will be issued at time of booking and are not changeable or refundable, cancellation charges will apply Iata Baggage Restrictions, Shipper/Consignee providing necessary customs documents", new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.GREEN) ),
			    new Chunk( "Airline Penalties if ticket cancelled after issued\n\nExcess Baggage  Charge = Baggage Cost Plus 10%",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.GREEN)  ),
				new Chunk( "****  Expedite Plus will require the following information to arrange customs clearance in LAX HTS Code, Description of goods and the value of product****",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.GREEN) ),

				new Chunk("The above information is based on current ticket and price availability at time of booking. Tickets will be issued at time of booking and are not changeable or refundable, cancellation charges will apply Iata Baggage Restrictions, Shipper/Consignee providing necessary customs documents", new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE) ),
			    new Chunk( "Airline Penalties if ticket cancelled after issued\n\nExcess Baggage  Charge = Baggage Cost Plus 10%",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE)  ),
				new Chunk( "****  Expedite Plus will require the following information to arrange customs clearance in LAX HTS Code, Description of goods and the value of product****",new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.NORMAL, Color.BLUE) )
		);
		//Phrase terms = new Phrase();
		//termList.forEach(t -> terms.add(t));
		//	FIELDS.put("terms", new Field("Terms", terms));
		//

		// make each item in termList an individual phrase to break on phrase in place of block

		int i=0;
		for( Chunk t: termList ){
			
			StringBuilder key = new StringBuilder("terms");
			StringBuilder label = new StringBuilder();
			if(i==0){
				label.append("Terms");
			}
			key.append(i++);
			FIELDS.put(key.toString(), new Field( label.toString(), new Phrase(t)) );
		}


		FIELDS.put("duties", new Field("Duties & Taxes", new Phrase("Passengers must declare commercial goods and must be compliant with countries rules and regulations",
				QuoteGenerator.CELL_FONT)));

		// schedule
		List<Chunk> flights = Arrays.asList(
				new Chunk("AF3605 DTW CDG 18:21/14 08:15/15\n\n", new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.BOLD)),
				new Chunk("AF5040 CDG VIE 10:00/12:00 / 15", new Font(Font.HELVETICA, QuoteGenerator.CELL_FONT_SIZE, Font.BOLD))
		);
		Phrase flightSchedule = new Phrase();
		for(Chunk fs : flights) {
			flightSchedule.add(fs);
		}
		FIELDS.put("flightSchedule", new Field("Schedule", flightSchedule));
	}
}
